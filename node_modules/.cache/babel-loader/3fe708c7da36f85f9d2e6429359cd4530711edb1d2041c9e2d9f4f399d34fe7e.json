{"ast":null,"code":"var _jsxFileName = \"E:\\\\KSP Datathon 2024\\\\Prototype Phase (LEVEL 2)\\\\web2\\\\policeperformance\\\\src\\\\LanguageContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport enTranslations from './en.json';\nimport knTranslations from './kn.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LanguageContext = /*#__PURE__*/createContext();\nconst LanguageContextProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState('en');\n  const translations = language === 'en' ? enTranslations : knTranslations;\n  const toggleLanguage = () => {\n    setLanguage(language === 'en' ? 'kn' : 'en');\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      translations,\n      toggleLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageContextProvider, \"fVUtOCD1O58HgvMjnE8lxRQa0QA=\");\n_c = LanguageContextProvider;\nexport default LanguageContextProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageContextProvider\");","map":{"version":3,"names":["React","createContext","useState","enTranslations","knTranslations","jsxDEV","_jsxDEV","LanguageContext","LanguageContextProvider","children","_s","language","setLanguage","translations","toggleLanguage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/KSP Datathon 2024/Prototype Phase (LEVEL 2)/web2/policeperformance/src/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport enTranslations from './en.json';\r\nimport knTranslations from './kn.json';\r\n\r\nexport const LanguageContext = createContext();\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [language, setLanguage] = useState('en');\r\n  const translations = language === 'en' ? enTranslations : knTranslations;\r\n\r\n  const toggleLanguage = () => {\r\n    setLanguage(language === 'en' ? 'kn' : 'en');\r\n  };\r\n\r\n  return (\r\n    <LanguageContext.Provider value={{ language, translations, toggleLanguage }}>\r\n      {children}\r\n    </LanguageContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LanguageContextProvider;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,cAAc,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAE9C,MAAMO,uBAAuB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMW,YAAY,GAAGF,QAAQ,KAAK,IAAI,GAAGR,cAAc,GAAGC,cAAc;EAExE,MAAMU,cAAc,GAAGA,CAAA,KAAM;IAC3BF,WAAW,CAACD,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;EAC9C,CAAC;EAED,oBACEL,OAAA,CAACC,eAAe,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEE,YAAY;MAAEC;IAAe,CAAE;IAAAL,QAAA,EACzEA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACV,EAAA,CAbIF,uBAAuB;AAAAa,EAAA,GAAvBb,uBAAuB;AAe7B,eAAeA,uBAAuB;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}